<<<<<<< HEAD
orbs:
  slack: circleci/slack@3.4.2
version: 2.1
executors:
  app-executor:
    docker:
      - image: circleci/node:13.12.0
    working_directory: ~/repo
  slack-executor:
    docker:
      - image: 'cibuilds/base:latest'
    resource_class: small
  docker-publisher:
    environment:
      IMAGE_NAME: uzoeddie/cinemadb
    docker:
      - image: circleci/buildpack-deps:stretch

aliases:
  - &show-current-branch-name
    run:
      name: Show current branch
      command: echo ${CIRCLE_BRANCH}
  - &restore-cache
    restore_cache:
      keys:
        - app-{{ checksum "package.json" }}
        - app-
  - &install-dependencies
    run:
      name: Install dependencies
      command: npm install
  - &save-cache
    save_cache:
      paths:
        - node_modules
      key: app-{{ checksum "package.json" }}
  - &install-aws-cli
    run:
      name: Installing AWS CLI
      working_directory: /
      command: |
        sudo apt-get -y -qq update
        sudo apt-get install -y awscli
        sudo apt-get install -y python-pip python-dev build-essential
  - &build-project
    run:
      name: Build Project
      command: |
        npm install
        npm run build
        cd build
        zip ../build.zip -r * .[^.]*
        echo "Build successful"

jobs:
  build:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - *install-dependencies
      - *save-cache

  linting:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - run:
          name: Run linting
          command: npm run lint

  prettier:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - run:
          name: Run prettier check
          command: npm run prettier:check

  unit-test:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - run:
          name: Run unit unit
          command: npm run test

 
  deploy-to-aws-s3:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *install-aws-cli
      - *build-project
      - run:
          name: Deploy to AWS S3
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]
            then
              aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_BUCKET_PRODUCTION} --delete
            elif [ "${CIRCLE_BRANCH}" == "staging" ]
            then
              aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_BUCKET_STAGING} --delete
            else
              aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_DEV_BUCKET} --delete
            fi

  deploy-to-aws-cloudfront:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *install-aws-cli
      - *build-project
      - run:
          name: Deploy to AWS Cloudfront
          command: |
            aws configure set preview.cloudfront true
            if [ "${CIRCLE_BRANCH}" == "master" ]
            then
              aws cloudfront create-invalidation --distribution-id ${PRODUCTION_DISTRIBUTION_ID} --paths /\*
            elif [ "${CIRCLE_BRANCH}" == "staging" ]
            then
              aws cloudfront create-invalidation --distribution-id ${STAGING_DISTRIBUTION_ID} --paths /\*
=======
version: 2.1
 
jobs:
  build:
    docker:
      - image: circleci/node:latest
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Show current branch
          command: echo ${CIRCLE_BRANCH}
      - restore_cache:
          keys:
            - app-{‌{ checksum "package.json" }}
            - app-
      - run:
          name: Install dependencies
          command: npm install
      - save_cache:
          paths:
            - node_modules
          key: app-{‌{ checksum "package.json" }}
 
  deploy-to-heroku:
    docker:
      - image: circleci/node:latest
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Show current branch
          command: echo ${CIRCLE_BRANCH}
      - run:
          name: Deploy to Heroku
          command: |
            if [ "${CIRCLE_BRANCH}" == "production" ]
            then
              git push https://heroku:$HEROKU_API_KEY@git.heroku.com/cinema-ap-production.git ${CIRCLE_BRANCH}:master -f
            elif [ "${CIRCLE_BRANCH}" == "staging" ]
            then
              git push https://heroku:$HEROKU_API_KEY@git.heroku.com/cinema-ap-staging.git ${CIRCLE_BRANCH}:master -f
>>>>>>> ae2c1ee8d9d205e62429958e5d04710eaa9f9a33
            else
              git push https://heroku:$HEROKU_API_KEY@git.heroku.com/cinema-app-devlop.git ${CIRCLE_BRANCH}:master -f
            fi
<<<<<<< HEAD

  notify-via-slack:
    executor: slack-executor
    steps:
      - slack/notify:
          message: "${CIRCLE_BRANCH} branch deployment to aws s3 and cloudfront is complete."
          webhook: $CIRCLECI_SLACK_WEBHOOK
      - slack/status:
          webhook: $CIRCLECI_SLACK_WEBHOOK

=======
 
>>>>>>> ae2c1ee8d9d205e62429958e5d04710eaa9f9a33
workflows:
  build_and_deploy:
    jobs:
      - build
<<<<<<< HEAD
      - linting:
          requires:
            - build
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - prettier:
=======
      - deploy-to-heroku:
>>>>>>> ae2c1ee8d9d205e62429958e5d04710eaa9f9a33
          requires:
            - build
          filters:
            branches:
              only:
                - develop
<<<<<<< HEAD
                - staging
                - master
      - unit-test:
          requires:
            - linting
            - prettier
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      
      - deploy-to-aws-s3:
          requires:
           - build
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - deploy-to-aws-cloudfront:
          requires:
            - deploy-to-aws-s3
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - notify-via-slack:
          requires:
            - deploy-to-aws-cloudfront
          filters:
            branches:
              only:
                - develop
                - staging
                - master
=======
                - staging
                - producion
>>>>>>> ae2c1ee8d9d205e62429958e5d04710eaa9f9a33
